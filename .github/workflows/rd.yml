# .github/workflows/ci-cd.yml

name: Go Build, Test, Docker Build & Publish, Release

on:
  push:
    branches: [ "main" ]
    # Trigger on version tags like v1.0.0, v2.3.4-beta
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  # !!! IMPORTANT: Change 'myapp' to your actual application name !!!
  APP_NAME: 'biu_email'

jobs:
  build-test-publish-release:
    runs-on: ubuntu-latest
    permissions:
      # Needed to checkout code (read) and create/upload releases (write)
      contents: write
      # Needed to push Docker images to GHCR
      packages: write
      # Needed for OIDC token authentication for Cosign/Sigstore
      id-token: write

    steps:
      # 1. Checkout Code - CRITICAL: Fetch full history for git archive
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch all history for all tags and branches.
          # Required for 'git archive <tag>' to work correctly.
          fetch-depth: 0

      # 2. Set up Go environment - With explicit cache dependency path
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod' # 使用go.mod中的版本
          cache: true

      # 添加依赖安装步骤
      - name: Install dependencies
        run: |
          go mod download
          go mod verify

      # 修改构建测试步骤
      - name: Build and Test
        run: |
          go build -v ./...
          go test -v ./...

      # --- Release Asset Preparation (Only run on tag push) ---

      # 4. Build Go Binary for Linux Release
      #    Builds a static binary for linux/amd64 suitable for release.
      - name: Build Go Application for Linux Release
        if: startsWith(github.ref, 'refs/tags/')
        id: build_release_binary
        run: |
          TAG=${{ github.ref_name }} # Gets the tag name (e.g., v1.0.0)
          FILENAME="${{ env.APP_NAME }}-${TAG}-linux-amd64"
          echo "Building release binary: ${FILENAME}"
          # CGO_ENABLED=0 creates a static binary, GOOS/GOARCH specify the target
          # -ldflags="-s -w" strips debug info and symbols to reduce size
          # Ensure you build the correct main package, '.' might be safer if main is in root
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -v -ldflags="-s -w" -o ${FILENAME} .
          echo "ASSET_PATH=${FILENAME}" >> $GITHUB_OUTPUT
          echo "ASSET_NAME=${FILENAME}" >> $GITHUB_OUTPUT

      # 5. Create Source Code Archive
      #    Archives the state of the repository at the specific tag.
      - name: Create Source Code Archive
        if: startsWith(github.ref, 'refs/tags/')
        id: source_archive
        run: |
          TAG=${{ github.ref_name }}
          ARCHIVE_BASENAME="source-code-${TAG}"
          ARCHIVE_NAME="${ARCHIVE_BASENAME}.tar.gz"
          # Use the specific tag for archiving, requires fetch-depth: 0 in checkout
          git archive --format=tar.gz --prefix="${ARCHIVE_BASENAME}/" -o ${ARCHIVE_NAME} ${TAG}
          echo "Created source archive: ${ARCHIVE_NAME}"
          echo "ARCHIVE_PATH=${ARCHIVE_NAME}" >> $GITHUB_OUTPUT
          echo "ARCHIVE_FILENAME=${ARCHIVE_NAME}" >> $GITHUB_OUTPUT

      # 6. Package Release Binary (Optional: Add README, LICENSE)
      #    Creates a compressed archive (.tar.gz) of the binary.
      - name: Package Release Binary
        if: startsWith(github.ref, 'refs/tags/')
        id: package_release
        run: |
          BINARY_NAME="${{ steps.build_release_binary.outputs.ASSET_NAME }}"
          ARCHIVE_NAME="${BINARY_NAME}.tar.gz"
          # Create the archive containing the binary.
          # Add other files like README.md or LICENSE here if needed (ensure they exist)
          # Example: tar czvf ${ARCHIVE_NAME} ${BINARY_NAME} README.md LICENSE
          tar czvf ${ARCHIVE_NAME} ${BINARY_NAME}
          echo "Successfully created binary package: ${ARCHIVE_NAME}"
          echo "ARCHIVE_PATH=${ARCHIVE_NAME}" >> $GITHUB_OUTPUT
          echo "ARCHIVE_FILENAME=${ARCHIVE_NAME}" >> $GITHUB_OUTPUT

      # 7. Create GitHub Release and Upload Assets
      #    Uses the tag to create a release and uploads the binary and source archives.
      - name: Create GitHub Release and Upload Assets
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2.0.6
        env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Provided automatically
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            Automated release of ${{ env.APP_NAME }} version ${{ github.ref_name }}
            Assets include:
            - Linux/amd64 binary package
            - Source code archive
          draft: false
          prerelease: contains(github.ref, '-rc') || contains(github.ref, '-beta') || contains(github.ref, '-alpha')
          # Upload both the binary package and the source code archive
          files: |
            ${{ steps.package_release.outputs.ARCHIVE_PATH }}
            ${{ steps.source_archive.outputs.ARCHIVE_PATH }}

      # --- Docker Steps (Run on main push/tags and PRs, but push only on main/tags) ---

      # 8. Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 9. Log in to the Container Registry (GHCR)
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 10. Extract Docker metadata (tags, labels)
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          # Add tag mapping for version tags if needed explicitly
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            # Add 'latest' tag only for default branch pushes (usually main)
            type=raw,value=latest,enable={{is_default_branch}}

      # 11. Build and push Docker image
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          # Optional: Specify Dockerfile if not named 'Dockerfile' in root
          # file: ./path/to/your/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Optional: Pass build arguments like version to Dockerfile
          # build-args: |
          #   APP_VERSION=${{ github.ref_name }}

      # --- Signing Steps (Optional but Recommended, run only on push) ---

      # 12. Install Cosign
      - name: Install Cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.5.0

      # 13. Sign the published Docker image
      - name: Sign the published Docker image
        # Only sign if we pushed (not a PR) AND the push step output a digest
        if: github.event_name != 'pull_request' && steps.build-and-push.outputs.digest != ''
        env:
          # Needed for keyless signing
          COSIGN_EXPERIMENTAL: "true"
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        run: |
          echo "Signing digest ${{ env.DIGEST }} for tags:"
          echo "${TAGS}"
          # Sign each comma-separated tag individually
          echo "${TAGS}" | sed 's/,/\n/g' | while read tag; do
            if [ -n "$tag" ]; then # Ensure tag is not empty
              echo "Signing ${tag}..."
              cosign sign --yes "${tag}@${DIGEST}"
            fi
          done