name: Release Go App, Binaries, and Docker Image

on:
  push:
    tags:
      - 'v*' # Trigger on version tags like v1.0.0
  workflow_dispatch: # Allow manual triggering

env:
  IMAGE_NAME: biu_email         # 应用/镜像基础名称
  GO_VERSION: '1.21'            # 指定 Go 版本
  GO_BINARY_NAME: biu_email      # Go 编译生成的二进制名称

jobs:
  build-go:
    name: Build Go Binaries
    runs-on: ubuntu-latest
    outputs:
      binary_artifact_name: ${{ steps.upload_artifact.outputs.artifact-name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Go Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Create bin directory
        run: mkdir -p ./bin

      - name: Build Go Binary for Ubuntu/Debian
        run: |
          echo "Building for linux/amd64 (Ubuntu/Debian)..."
          # 这里使用 CGO_ENABLED=0 生成静态二进制，适用于大多数发行版
          GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -v -ldflags="-s -w" -o ./bin/${{ env.GO_BINARY_NAME }}-ubuntu-debian .
          echo "Build complete for Ubuntu/Debian."
          ls -lh ./bin

      - name: Build Go Binary for CentOS
        run: |
          echo "Building for linux/amd64 (CentOS)..."
          # 如果需要针对 CentOS 做特殊处理，可在此调整参数
          GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -v -ldflags="-s -w" -o ./bin/${{ env.GO_BINARY_NAME }}-centos .
          echo "Build complete for CentOS."
          ls -lh ./bin

      - name: Upload Go Binaries Artifact
        id: upload_artifact
        uses: actions/upload-artifact@v4
        with:
          name: go-binaries-${{ github.ref_name }}
          path: ./bin/*

  build-and-push-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Validate Secrets
        run: |
          if [ -z "${{ secrets.DOCKER_HUB_USERNAME }}" ]; then
            echo "::error::DOCKER_HUB_USERNAME secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.DOCKER_HUB_TOKEN }}" ]; then
            echo "::error::DOCKER_HUB_TOKEN secret is not set"
            exit 1
          fi
          echo "Secrets validation passed"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: build-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Print Image Details
        run: |
          echo "Docker Image Tags: ${{ steps.meta.outputs.tags }}"
          echo "Docker Image Digest: ${{ steps.build-push.outputs.digest }}"

  create-release:
    name: Create GitHub Release
    needs: [build-go, build-and-push-docker]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download Go Binaries Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-go.outputs.binary_artifact_name }}
          path: ./release-assets

      - name: Create Source Code Archive
        run: |
          mkdir -p release-assets
          git archive --format=tar.gz -o release-assets/source-${{ github.ref_name }}.tar.gz HEAD

      - name: List downloaded and generated files
        run: ls -R ./release-assets

      - name: Create Release Notes Body
        id: release_notes
        run: |
          echo "## Release Notes for ${{ github.ref_name }}" > release_body.md
          echo "" >> release_body.md
          echo "This release includes the compiled application binaries and updated Docker images." >> release_body.md
          echo "" >> release_body.md
          echo "**Docker Images:**" >> release_body.md
          echo "- Docker Hub: \`${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}\` (and \`latest\`)" >> release_body.md
          echo "- GitHub Packages: \`ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}\` (and \`latest\`)" >> release_body.md
          echo "" >> release_body.md
          echo "**Assets:**" >> release_body.md
          echo "- Compiled binaries for Ubuntu/Debian and CentOS." >> release_body.md
          echo "- Source code archive." >> release_body.md
          body_content=$(cat release_body.md)
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "$body_content" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          body_path: release_body.md
          files: ./release-assets/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
