# .github/workflows/ci-cd.yml

name: Go Build, Test, Docker Build & Publish

on:
  push:
    branches: [ "main" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  # Use ghcr.io for GitHub Container Registry
  REGISTRY: ghcr.io
  # Use the GitHub repository name as the image name
  # Format: ghcr.io/<owner>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read       # Needed to check out the repository
      packages: write      # Needed to push Docker images to GHCR
      id-token: write    # Needed for OIDC token authentication for Cosign/Sigstore

    steps:
      # 1. Checkout Code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.1' # Or your desired Go version

      # 3. Build Go Application
      #    (Assumes your Dockerfile might use the pre-built binary,
      #     or you might adjust Dockerfile for multi-stage build)
      - name: Build Go Application
        run: go build -v -o myapp ./... # Build the application, output to 'myapp' (adjust name if needed)

      # 4. Run Go Tests
      - name: Test Go Application
        run: go test -v ./...

      # --- Docker Steps ---

      # 5. Set up QEMU (Recommended for multi-platform builds, optional if only building for linux/amd64)
      #    See: https://github.com/docker/setup-qemu-action
      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v3

      # 6. Set up Docker Buildx
      #    Buildx is needed for advanced features like caching and multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # Uses BuildKit engine

      # 7. Log in to the Container Registry (GHCR)
      #    Only log in when pushing (not on Pull Requests)
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} # Use the built-in GITHUB_TOKEN

      # 8. Extract Docker metadata (tags, labels)
      #    Generates tags like 'latest', git sha, and version tags automatically
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5 # Automatically generates tags and labels
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          # Example tags generated:
          # type=schedule
          # type=ref,event=branch
          # type=ref,event=pr
          # type=semver,pattern={{version}}
          # type=semver,pattern={{major}}.{{minor}}
          # type=semver,pattern={{major}}
          # type=sha

      # 9. Build and push Docker image
      #    - Builds the image using Dockerfile in the context root.
      #    - Pushes only if the event is NOT a pull_request.
      #    - Uses tags and labels generated by the metadata action.
      #    - Leverages GHA cache for faster subsequent builds.
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: . # Build context is the root of the repository
          file: ./Dockerfile # Explicitly state the Dockerfile path (optional if it's named 'Dockerfile' in root)
          push: ${{ github.event_name != 'pull_request' }} # Only push on main branch pushes or tags
          tags: ${{ steps.meta.outputs.tags }}             # Use tags from metadata step
          labels: ${{ steps.meta.outputs.labels }}           # Use labels from metadata step
          cache-from: type=gha                             # Use GitHub Actions cache as source
          cache-to: type=gha,mode=max                      # Write to GitHub Actions cache (mode=max for potentially larger cache)

      # --- Signing Steps (Optional but Recommended) ---

      # 10. Install Cosign for signing the image
      #     Only install if we are pushing the image
      - name: Install Cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.5.0 # Use a specific version or latest
        # uses: sigstore/cosign-installer@main # Or track main branch (less stable)
        # with:
        #   cosign-release: 'v2.2.4' # Optionally specify a version

      # 11. Sign the published Docker image
      #     Only sign if we pushed the image (not on Pull Requests)
      #     Uses Sigstore's keyless signing with GitHub OIDC token
      - name: Sign the published Docker image
        if: github.event_name != 'pull_request'
        env:
          # Pass the tags and digest output from the build-push step
          COSIGN_EXPERIMENTAL: "true" # Required for keyless signing
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # Sign each tag with the digest
        run: |
          echo "Signing digest ${{ env.DIGEST }} with tags:"
          echo "${TAGS}"
          echo "${TAGS}" | sed 's/,/\n/g' | while read tag; do
            echo "Signing ${tag}..."
            cosign sign --yes "${tag}@${DIGEST}"
          done
